#!/bin/sh -e

##########################################################################
#   Script description:
#       Align reads to reference genome
#
#   Usage:
#       LPJS cluster:
#           lpjs submit 09-bwa-mem.lpjs
##########################################################################

##########################################################################
#   Main
##########################################################################

#lpjs jobs 18
#lpjs procs-per-job 4
#lpjs min-procs-per-node procs-per-job
#lpjs pmem-per-proc 1500MB
#lpjs log-dir Logs/09-bwa-mem

##############################################################################
# Update PATH on a chimeric cluster (multiple operating systems used for
# compute nodes.
#
# The path used by the package manager that installed LPJS is added
# automatically (/usr/local for FreeBSD ports, usually /usr/pkg or /opt/pkg
# for pkgsrc).
#
# Add the default non-priveleged pkgsrc prefix used by auto-pkgsrc-setup.
##############################################################################

# Not every sh implementation can combine the two commands below
PATH=$LPJS_HOME_DIR/Pkgsrc/pkg:$path
export PATH

# Set a default value for testing outside the LPJS environment
: ${LPJS_ARRAY_INDEX:=1}
: ${LPJS_PROCS_PER_JOB:=4}

# Document software versions used for publication
uname -a
hostname
pwd
bwa || true
printenv

##############################################################################
# If this node cannot access the input files using NFS, pull them from
# the submit node.  If all nodes use NFS, this can be removed.  Out macOS
# node currently does not use NFS due to issues with Apple's full disk
# access security feature.
##############################################################################

input_dir='Results/04-trim'
output_dir='Results/09-bwa-mem'
index_dir='Results/08-bwa-index'

marker=lpjs-$LPJS_SUBMIT_HOST-shared-fs-marker
if [ ! -e $marker ]; then
    printf "$marker does not exist.  Using rsync to transfer files.\n"
    
    # Recreate directory structure in temp working dir and pull
    # our input files into it
    mkdir -p $input_dir $output_dir
    input1="$input_dir/*sample${LPJS_ARRAY_INDEX}-*R1*"
    input2="$input_dir/*sample${LPJS_ARRAY_INDEX}-*R2*"
    set -x
    rsync -rv --copy-links ${LPJS_SUBMIT_HOST}:$LPJS_SUBMIT_DIRECTORY/Reference .
    rsync -rv --copy-links ${LPJS_SUBMIT_HOST}:$LPJS_SUBMIT_DIRECTORY/$index_dir Results/
    rsync --copy-links ${LPJS_SUBMIT_HOST}:$LPJS_SUBMIT_DIRECTORY/$input1 $input_dir
    rsync --copy-links ${LPJS_SUBMIT_HOST}:$LPJS_SUBMIT_DIRECTORY/$input2 $input_dir
    set +x
else
    printf "$marker found.  No need to transfer files.\n"
    input1=$(ls $input_dir/*sample$LPJS_ARRAY_INDEX-*R1*)
    input2=$(ls $input_dir/*sample$LPJS_ARRAY_INDEX-*R2*)
fi

ref_file=$(Reference/genome-filename.sh)

# One iteration if running under LPJS, all iterations otherwise
printf "Running task $LPJS_ARRAY_INDEX...\n"
outfile=$(basename ${input1%-R1.fastq.*}).sam

set -x
cd $output_dir
rm -f pipe1 pipe2
mkfifo pipe1
mkfifo pipe2
zstdcat ../../$input1 > pipe1 &
zstdcat ../../$input2 > pipe2 &
bwa mem -M -t $LPJS_PROCS_PER_JOB \
    ../08-bwa-index/$ref_file pipe1 pipe2 > $outfile
wait

# Don't waste time and bandwidth sending back input files
if [ ! -e $marker ]; then
    rm -rf $input_dir $index_dir Reference
fi
