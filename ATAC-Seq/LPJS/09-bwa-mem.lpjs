#!/bin/sh -e

##########################################################################
#   Script description:
#       Align reads to reference genome
#
#   Usage:
#       LPJS cluster:
#           lpjs submit 09-bwa-mem.lpjs
##########################################################################

##########################################################################
#   Main
##########################################################################

#lpjs jobs 18
#lpjs processors-per-job 4
#lpjs threads-per-process processors-per-job
# lpjs peak-mem: 
#lpjs pmem-per-processor 2GiB
#lpjs log-dir Logs/09-bwa-mem
#lpjs pull-command rsync -r --mkpath --copy-links %h:%s/Reference . && rsync -r --mkpath %h:%s/Results/08-bwa-index Results/08-bwa-index' && rsync -r --mkpath %h:%s/Results/04-trim/\*-sample%i\* Results/04-trim

##############################################################################
# Update PATH on a chimeric cluster (multiple operating systems used for
# compute nodes.
#
# The path used by the package manager that installed LPJS is added
# automatically (/usr/local for FreeBSD ports, usually /usr/pkg or /opt/pkg
# for pkgsrc).
#
# Add the default non-priveleged pkgsrc prefix used by auto-pkgsrc-setup.
##############################################################################

# Not every sh implementation can combine the two commands below
PATH=$LPJS_HOME_DIR/Pkgsrc/pkg/bin:/usr/pkg/bin:/opt/pkg/bin:$PATH
export PATH

# Set a default value for testing outside the LPJS environment
: ${LPJS_ARRAY_INDEX:=1}
: ${LPJS_PROCS_PER_JOB:=4}

# Document software versions used for publication
uname -a
hostname
pwd
bwa || true
printenv

##############################################################################
# If this node cannot access the input files using NFS, pull them from
# the submit node.  If all nodes use NFS, this can be removed.  Out macOS
# node currently does not use NFS due to issues with Apple's full disk
# access security feature.
##############################################################################

input_dir='Results/04-trim'
output_dir='Results/09-bwa-mem'
index_dir='Results/08-bwa-index'

sample=$LPJS_ARRAY_INDEX

input1=$(ls $input_dir/*-sample$sample-*R1.fastq.zst)
input2=$(ls $input_dir/*-sample$sample-*R2.fastq.zst)

ref_file=$(Reference/genome-filename.sh)

# One iteration if running under LPJS, all iterations otherwise
printf "Running task $LPJS_ARRAY_INDEX...\n"
outfile=$(basename ${input1%-R1.fastq.zst}).sam

set -x
cd $output_dir
pipe1=pipe1.$LPJS_JOB_ID
pipe2=pipe2.$LPJS_JOB_ID
rm -f $pipe1 $pipe2
mkfifo $pipe1
mkfifo $pipe2
zstdcat ../../$input1 > $pipe1 &
zstdcat ../../$input2 > $pipe2 &
bwa mem -M -t $LPJS_PROCS_PER_JOB \
    ../08-bwa-index/$ref_file $pipe1 $pipe2 > $outfile
wait
rm -f $pipe1 $pipe2

# Don't waste time and bandwidth sending back input files
if [ ! -e $marker ]; then
    rm -rf $input_dir $index_dir Reference
fi
