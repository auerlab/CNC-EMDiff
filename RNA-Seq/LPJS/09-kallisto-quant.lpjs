#!/bin/sh -e

##########################################################################
#   Description:
#       Run kallisto quantification for each RNA sample.
#
#   Dependencies:
#       Requires kallisto index.  Run after *-kallisto-index.lpjs.
#
#       All necessary tools are assumed to be in PATH.  If this is not
#       the case, add whatever code is needed here to gain access.
#       (Adding such code to your .bashrc or other startup script is
#       generally a bad idea since it's too complicated to support
#       every program with one environment.)
##########################################################################

#lpjs jobs 18
#lpjs processors-per-job 4
#lpjs threads-per-process processors-per-job
# lpjs peak-mem Logs/09-kallisto-quant:
#   1185408 KiB / 1024 / 4 procs 289.40625 MiB + 10%
#lpjs pmem-per-processor 320MiB
#lpjs log-dir Logs/09-kallisto-quant
# macOS 12 rsync is broken, can't handle multiple source specs
# macOS rsync doesn't support --mkpath
# Use pkgsrc rsync in /opt/pkg instead
#lpjs path /opt/pkg/bin:/usr/local/bin:/usr/bin:/bin
#lpjs pull-command rsync --mkpath -r %h:%s/Results/08-kallisto-index Results && rsync --mkpath %h:%s/Results/04-trim/\*sample%i-\*.zst Results/04-trim/
#lpjs push-command rsync -r %w/Results/09-kallisto-quant %h:%s/Results

##############################################################################
# Update PATH on a chimeric cluster (multiple operating systems used for
# compute nodes.
#
# The path used by the package manager that installed LPJS is added
# automatically (/usr/local for FreeBSD ports, usually /usr/pkg or /opt/pkg
# for pkgsrc), though this is overridden by "#lpjs path".
#
# Add the default non-priveleged pkgsrc prefix used by auto-pkgsrc-setup.
##############################################################################

# Not every sh implementation can combine the two commands below
PATH=$LPJS_HOME_DIR/Pkgsrc/pkg/bin:/usr/pkg/bin:/opt/pkg/bin:$PATH
export PATH

input_dir='Results/04-trim'
output_dir='Results/09-kallisto-quant'
index_dir='Results/08-kallisto-index'

# Document software versions used for publication
uname -a
kallisto version
pwd

# kallisto can't handle zstd and will simply seg fault rather than
# issue an error message.  If your trimmed fastq files are in zstd format,
# this will convert to gzip format.
# Convert zstd to gz rather than raw to reduce NFS load from compute nodes
# --fast minimizes CPU usage in exchange for larger files
# It might be possible to use a named pipe, assuming kallisto doesn't
# need to do seek operations on the input file.  However, generating
# gzip files doesn't take that long.
zst1=$(echo $input_dir/*sample${LPJS_ARRAY_INDEX}-*-R1.fastq.zst)
zst2=$(echo $input_dir/*sample${LPJS_ARRAY_INDEX}-*-R2.fastq.zst)
gz1=${zst1%.zst}.gz
gz2=${zst2%.zst}.gz
# Run both at the same time, since we allocated 4 cores anyway
# These are CPU-bound, so disk will not usually be a bottleneck
# Don't try to reuse the .gz files, they may be incomplete from canceled jobs
printf "$zst1 -> $gz1, $zst2 -> $gz2 for kallisto...\n"
zstdcat $zst1 | gzip --fast --stdout > $gz1 &
zstdcat $zst2 | gzip --fast --stdout > $gz2
wait

# If 04-trim.lpjs outputs .gz files, use this instead
# gz1=$(echo Results/04-trim/*sample${LPJS_ARRAY_INDEX}-*-R1.fastq.gz)
# gz2=$(echo Results/04-trim/*sample${LPJS_ARRAY_INDEX}-*-R2.fastq.gz)

# Kallisto requires an output subdirectory for each sample
stem=$(basename ${gz1%-R1*})
my_output_dir=$output_dir/$stem
mkdir -p $my_output_dir

set -x
kallisto quant \
    --threads=$LPJS_PROCESSORS_PER_JOB \
    --index=Results/08-kallisto-index/all-but-xy.index \
    --output-dir=$my_output_dir $gz1 $gz2

# Don't try to reuse the .gz files, they may be incomplete from canceled jobs
rm -f $gz1 $gz2
