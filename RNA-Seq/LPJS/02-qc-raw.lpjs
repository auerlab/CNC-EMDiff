#!/bin/sh -e

##########################################################################
#   Script description:
#       Run quality checks on raw data
#       Based on work of Dr. Andrea Rau:
#       https://github.com/andreamrau/OpticRegen_2019
#
#   Dependencies:
#       Requires directory structure.  Run after *-organize.sh.
#
#       All necessary tools are assumed to be in PATH.  If this is not
#       the case, add whatever code is needed here to gain access.
#       (Adding such code to your .bashrc or other startup script is
#       generally a bad idea since it's too complicated to support
#       every program with one environment.)
#
#   History:
#   Date        Name        Modification
#   2019-09-13  Jason Bacon Begin
##########################################################################

# Set job array to number of samples.
# Each invocation of this script will run 2 fastqc processes, forward
# and reverse.
#lpjs jobs 18
#lpjs procs-per-job 2
#lpjs min-procs-per-node procs-per-job
# Memory requirements can only be determined by trial and error.
# Run a sample job and monitor closely in "top" or rununder a tool that
# reports maximum memory use.
#lpjs pmem-per-proc 500MiB
#lpjs log-dir Logs/02-qc-raw

##############################################################################
# Update PATH on a chimeric cluster (multiple operating systems used for
# compute nodes.
#
# FreeBSD ports are installed under /usr/local
# pkgsrc packages in a non-priveleged tree installed by auto-pkgsrc-setup
# are installed under ~/Pkgsrc/pkg by default
# pkgsrc packages in a priveleged tree (installed by root) on Linux and netBSD
# are found under /usr/pkg by default
# pkgsrc packages in a priveleged tree (installed by root) on macOS
# are found under /opt/pkg by default (/usr is read-only on Macs)
# $HOME is not set on Darwin
# Prepend common pkgsrc bin directories if they exist
##############################################################################

for prefix in /Users/$LPJS_USER_NAME/Pkgsrc/pkg \
	      /home/$LPJS_USER_NAME/Pkgsrc/pkg \
	      /usr/pkg \
	      /opt/pkg; do
    if [ -e $prefix ]; then
	PATH=$prefix/bin:$PATH
	export PATH
    fi
done

# Set a default value for testing outside the SLURM environment
: ${LPJS_ARRAY_INDEX:=1}

# Document software versions used for publication
uname -a
hostname
pwd
which fastqc
fastqc --version
printenv

##############################################################################
# If this node cannot access the input files using NFS, pull them from
# the submit node.  If all nodes use NFS, this can be removed.  Out macOS
# node currently does not use NFS due to issues with Apple's full disk
# access security feature.
##############################################################################

marker=lpjs-$LPJS_SUBMIT_HOST-shared-fs-marker
if [ ! -e $marker ]; then
    printf "$marker does not exist.  Using rsync to transfer files.\n"
    printf "Fetching $LPJS_SUBMIT_HOST:$LPJS_SUBMIT_DIRECTORY/$infile1\n"
    
    # Recreate directory structure in temp working dir and pull
    # our input files into it
    input_dir='Results/01-organize/Raw-renamed'
    output_dir='Results/02-qc-raw'
    mkdir -p $input_dir $output_dir
    input1="$input_dir/*sample${LPJS_ARRAY_INDEX}-*R1*"
    input2="$input_dir/*sample${LPJS_ARRAY_INDEX}-*R2*"
    set -x
    rsync --copy-links ${LPJS_SUBMIT_HOST}:$LPJS_SUBMIT_DIRECTORY/$input1 $input_dir
    rsync --copy-links ${LPJS_SUBMIT_HOST}:$LPJS_SUBMIT_DIRECTORY/$input2 $input_dir
    set +x
else
    printf "$marker found.  No need to transfer files.\n"
    input1=$(ls Results/01-organize/Raw-renamed/*sample${LPJS_ARRAY_INDEX}-*R1*)
    input2=$(ls Results/01-organize/Raw-renamed/*sample${LPJS_ARRAY_INDEX}-*R2*)
fi

# Raw files from sequencing center
raw1=$(ls Results/01-organize/Raw-renamed/*sample${LPJS_ARRAY_INDEX}-*R1*.fastq.xz)
raw2=$(ls Results/01-organize/Raw-renamed/*sample${LPJS_ARRAY_INDEX}-*R2*.fastq.xz)

# Filename stems for fastqc output
stem_raw1=$(basename ${raw1%.fastq.xz})
stem_raw2=$(basename ${raw2%.fastq.xz})

# Background the first three to run 4 jobs in parallel
xzcat $raw1 | fastqc -o Results/02-qc-raw stdin:$stem_raw1 &
xzcat $raw2 | fastqc -o Results/02-qc-raw stdin:$stem_raw2

# Make sure backgrounded job completes before terminating script
wait
