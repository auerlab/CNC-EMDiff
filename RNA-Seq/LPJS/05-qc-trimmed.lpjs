#!/bin/sh -e

##########################################################################
#   Script description:
#       Run quality checks on raw data
#       Based on work of Dr. Andrea Rau:
#       https://github.com/andreamrau/OpticRegen_2019
#
#   Dependencies:
#       Requires directory structure.  Run after *-organize.sh.
#
#       All necessary tools are assumed to be in PATH.  If this is not
#       the case, add whatever code is needed here to gain access.
#       (Adding such code to your .bashrc or other startup script is
#       generally a bad idea since it's too complicated to support
#       every program with one environment.)
##########################################################################

# Set job array to number of samples.
# Each invocation of this script will run 2 fastqc processes, forward
# and reverse.
#lpjs jobs 18
#lpjs processors-per-job 2
#lpjs threads-per-process processors-per-job
# lpjs peak-mem: 1121200 KiB / 2 procs / 1024 = 547 MiB + 10% = 602 MiB
#lpjs pmem-per-processor 650MiB
#lpjs log-dir Logs/05-qc-trimmed
##############################################################################
# Update PATH on a chimeric cluster (multiple operating systems used for
# compute nodes)
#
# The PATH used by the package manager that installed LPJS (/usr/local for
# FreeBSD ports, usually /usr/pkg or /*/pkg for pkgsrc), is automatically
# prepended to the default PATH.  This is overridden by "#lpjs path", so
# if we use it, we must add all directories ourselves.
#
# Add the default non-priveleged pkgsrc prefix used by auto-pkgsrc-setup.
#
# Caution: Different versions of rsync behave differently with respect
# to creating path components at the destination.  Newer rsync requires
# --mkpath while older ones included with macOS and RHEL do not support
# this flag. Set path to use pkgsrc rsync in ~/Pkgsrc/pkg or /*/pkg.
#lpjs path ~/Pkgsrc/pkg/bin:/opt/pkg/bin:/usr/pkg/bin:/usr/local/bin:/usr/bin:/bin
#lpjs pull-command rsync --mkpath --copy-links %h:%s/Results/04-trim/\*-sample%i-\*.zst Results/04-trim
#lpjs push-command rsync --mkpath -av %w/Results/05-qc-trimmed %h:%s/Results

# Set a default value for testing outside the LPJS environment
: ${LPJS_ARRAY_INDEX:=1}

# Document software versions used for publication
uname -a
hostname
pwd
which fastqc
fastqc --version
printenv

input_dir='Results/04-trim'
output_dir='Results/05-qc-trimmed'

##############################################################################
# If this node cannot access the input files using NFS, pull them from
# the submit node.  If all nodes use NFS, this can be removed.  Out macOS
# node currently does not use NFS due to issues with Apple's full disk
# access security feature.
##############################################################################

sample=$LPJS_ARRAY_INDEX
input1=$(ls $input_dir/*sample${LPJS_ARRAY_INDEX}-*R1*)
input2=$(ls $input_dir/*sample${LPJS_ARRAY_INDEX}-*R2*)

# In case this node uses file transfer and a temp working directory
mkdir -p Results/05-qc-trimmed

printf "Processing $input1 and $input2...\n"

# Filename stems for fastqc output
stem_input1=$(basename ${input1%.fastq.zst})
stem_input2=$(basename ${input2%.fastq.zst})

# Background the first three to run 4 jobs in parallel
zstdcat $input1 | fastqc -o Results/05-qc-trimmed stdin:$stem_input1 &
zstdcat $input2 | fastqc -o Results/05-qc-trimmed stdin:$stem_input2

# Make sure backgrounded job completes before terminating script
wait
