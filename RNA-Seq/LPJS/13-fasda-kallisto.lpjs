#!/bin/sh -e

#
#   Dependencies:
#       Requires kallisto abundances.  Run after *-kallisto-quant.lpjs

#lpjs jobs 1
#lpjs processors-per-job 1
#lpjs threads-per-process processors-per-job
#lpjs pmem-per-processor 300MiB
#lpjs log-dir Logs/13-fasda-kallisto

##############################################################################
# Update PATH on a chimeric cluster (multiple operating systems used for
# compute nodes.
#
# The path used by the package manager that installed LPJS is added
# automatically (/usr/local for FreeBSD ports, usually /usr/pkg or /opt/pkg
# for pkgsrc).
#
# Add the default non-priveleged pkgsrc prefix used by auto-pkgsrc-setup.
##############################################################################

# Not every sh implementation can combine the two commands below
PATH=$LPJS_HOME_DIR/Pkgsrc/pkg/bin:$PATH
export PATH

# Document software versions used for publication
uname -a
fasda --version
pwd

kallisto_dir=Results/09-kallisto-quant
fasda_dir=Results/13-fasda-kallisto

marker=lpjs-$LPJS_SUBMIT_HOST-shared-fs-marker
if [ ! -e $marker ]; then
    printf "$marker does not exist.  Using rsync to transfer files.\n"
    
    # Recreate directory structure in temp working dir and pull
    # our input files into it
    mkdir -p $fasda_dir
    set -x
    rsync -r --copy-links ${LPJS_SUBMIT_HOST}:$LPJS_SUBMIT_DIRECTORY/$kallisto_dir \
	    Results/
    set +x
else
    printf "$marker found.  No need to transfer files.\n"
fi

for cell_type in neuro chondro; do
    for condition in time1 time2 time3; do
	printf "Normalizing $condition...\n"
	time fasda normalize \
	    --output $fasda_dir/$cell_type-$condition-all-norm.tsv \
	    $kallisto_dir/$cell_type-*-rep*-$condition/abundance.tsv
    done

    printf "Computing fold-change...\n"
    time fasda fold-change \
	--output $fasda_dir/$cell_type-time1-time2-FC.txt \
	$fasda_dir/$cell_type-time1-all-norm.tsv \
	$fasda_dir/$cell_type-time2-all-norm.tsv

    time fasda fold-change \
	--output $fasda_dir/$cell_type-time1-time3-FC.txt \
	$fasda_dir/$cell_type-time1-all-norm.tsv \
	$fasda_dir/$cell_type-time3-all-norm.tsv

    time fasda fold-change \
	--output $fasda_dir/$cell_type-time2-time3-FC.txt \
	$fasda_dir/$cell_type-time2-all-norm.tsv \
	$fasda_dir/$cell_type-time3-all-norm.tsv
done

# Don't waste time send back input files
if [ ! -e $marker ]; then
    rm -rf $kallisto_dir
fi
